import random

star_names = ["aca", "acham", "acis", "acruch", "adrus", "ais", "ait", "aladus", "alarnea", "ale", "alfectular", "alhah", "alham", "alhamird", "alis", "alke", "allulum", "allum", "alm", "alnaosterock", "alnarctrion", "alnasir", "alni", "alphaecular", "alphoma", "alsakadr", "alsat", "alsh", "alus", "alzir", "aneten", "anfaffira", "antai", "arcturha", "aridaljidus", "arkat", "asel", "asella", "aselshea", "asica", "astanta", "astegue", "asym", "aus", "auschamin", "azelgen", "bah", "becubel", "beiondenekbat", "bel", "bor", "boreat", "botabitostalphaus", "cashurzim", "cundus", "dabbah", "demalna", "den", "denephama", "derealis", "dis", "doubal", "doubbalta", "doubellum", "doubet", "doubhed", "doublecoca", "dsch", "dsciauva", "dubetalsh", "duble", "dus", "elamak", "elgetab", "ellat", "ellud", "ellum", "ellus", "etanebeneb", "furhalken", "furus", "garkaldhma", "ghuja", "giebah", "ginkit", "golaciat", "golasak", "gomaashali", "gonebet", "gor", "gorneben", "graiphda", "graz", "grebsuud", "hai", "hail", "har", "hat", "hoed", "hor", "hyat", "jabih", "kaak", "kaif", "kaliske", "kar", "karan", "kat", "ken", "kor", "krigel", "kum", "makaus", "mali", "malum", "mar", "meb", "mebothirras", "mekkaja", "men", "meneterf", "meniya", "menkaja", "ment", "merea", "merez", "metakalget", "miaus", "midi", "min", "minderasa", "mintarctrabi", "mir", "mulacheaten", "muladhezn", "murus", "mus", "musafar", "nekkath", "nif", "niyadus", "nuble", "nukbani", "nus", "oka", "okarf", "okaura", "pherea", "phomat", "phornar", "plas", "pol", "poli", "polis", "pos", "posma", "prix", "procan", "procid", "propel", "propua", "protalnih", "qualnih", "rab", "rafik", "ram", "riget", "rope", "rud", "sali", "samida", "sar", "sareal", "sat", "sathfague", "scian", "secis", "serf", "serim", "skabih", "spican", "spicaph", "spichba", "suar", "tam", "tan", "tejah", "teramai", "terasecor", "terops", "thfak", "torctursch", "tosmarachib", "vionebenta", "vior", "zanchemia", "zostrai", "zostrior", "zubeneb", "zublesalus", "154", "157", "ach", "achemirrim", "achen", "achujat", "acoreal", "ailar", "ainkaus", "alacis", "alasai", "alcha", "alcygnia", "aldubal", "algor", "alhadus", "alhai", "ali", "aliona", "alis", "alisail", "alishain", "alitor", "alken", "alniba", "alniyada", "alphene", "alra", "alrabird", "alrijl", "alrim", "alrion", "alsha", "alta", "altalgen", "alzim", "aniah", "aniyada", "aniyadras", "anki", "aselgent", "aselluralka", "ashaus", "asicanian", "assad", "aurater", "aurha", "aus", "austam", "avijah", "aviort", "azmim", "benkaus", "bor", "boreo", "cam", "caphel", "chenkan", "chomam", "corasak", "coreat", "cun", "cygnif", "den", "denas", "denat", "derfar", "dhma", "diralsh", "doubet", "doubetegieb", "dus", "dustralch", "ela", "ella", "ellacunda", "ellum", "ellus", "enkiban", "for", "forcula", "foreb", "furam", "gieb", "giental", "gin", "goreb", "gra", "grux", "haed", "horegue", "hyada", "jab", "kabitar", "kadalif", "karige", "kat", "kor", "korr", "kra", "kum", "kumidus", "malhaecuruda", "marcturoten", "marfi", "marnal", "marneptera", "maros", "mebenkal", "megrazed", "meis", "mekkabi", "meneala", "menebah", "mer", "meraia", "meregrez", "miaple", "miassa", "midi", "min", "mir", "mirphas", "muharfaferkafar", "muhlis", "mula", "mulferscha", "mulum", "musa", "mustra", "nai", "nathfatris", "nundeben", "okabi", "peathen", "phorebel", "pol", "pola", "polas", "polasellas", "polis", "port", "pos", "posmarida", "postaygni", "postorea", "postrashaget", "pra", "prachekkat", "prid", "prim", "priorgoreb", "prostran", "rab", "rak", "rakis", "ralphernahaen", "ram", "ramar", "ran", "rigedi", "rionda", "rollat", "sada", "sadabit", "sadarkat", "sak", "sali", "sarga", "scherib", "scida", "secona", "selatar", "sha", "shaipus", "shamir", "shergar", "sib", "sichba", "sirak", "skens", "spichel", "stertanz", "stratra", "suhlis", "tabba", "tabitor", "talfik", "talgin", "tan", "tanealm", "tarid", "tenor", "terion", "terk", "therola", "yil", "zos", "zuble", "zubles"]
#syllables = ["mx", "my", "mz", "na", "nb", "nc", "nd", "ne", "nf", "ng", "nh", "ni", "nj", "nk", "nl", "nm", "nn", "no", "np", "nq", "nr", "ns", "nt", "nu", "nv", "nw", "nx", "ny", "nz", "oa", "ob", "oc", "od", "oe", "of", "og", "oh", "oi", "oj", "ok", "ol", "om", "on", "oo", "op", "oq", "or", "os", "ot", "ou", "ov", "ow", "ox", "oy", "oz", "pa", "pb", "pc", "pd", "pe", "pf", "pg", "ph", "pi", "pj", "pk", "pl", "pm", "pn", "po", "pp", "pq", "pr", "ps", "pt", "pu", "pv", "pw", "px", "py", "pz", "qa", "qb", "qc", "qd", "qe", "qf", "qg", "qh", "qi", "qj", "qk", "ql", "qm", "qn", "qo", "qp", "qq", "qr", "qs", "qt", "qu", "qv", "qw", "qx", "qy", "qz", "ra", "rb", "rc", "rd", "re", "rf", "rg", "rh", "ri", "rj", "rk", "rl", "rm", "rn", "ro", "rp", "rq", "rr", "rs", "rt", "ru", "rv", "rw", "rx", "ry", "rz", "sa", "sb", "sc", "sd", "se", "sf", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sp", "sq", "sr", "ss", "st", "su", "sv", "sw", "sx", "sy", "sz", "ta", "tb", "tc", "td", "te", "tf", "tg", "th", "ti", "tj", "tk", "tl", "tm", "tn", "to", "tp", "tq", "tr", "ts", "tt", "tu", "tv", "tw", "tx", "ty", "tz", "ua", "ub", "uc", "ud", "ue", "uf", "ug", "uh", "ui", "uj", "uk", "ul", "um", "un", "uo", "up", "uq", "ur", "us", "ut", "uu", "uv", "uw", "ux", "uy", "uz", "va", "vb", "vc", "vd", "ve", "vf", "vg", "vh", "vi", "vj", "vk", "vl", "vm", "vn", "vo", "vp", "vq", "vr", "vs", "vt", "vu", "vv", "vw", "vx", "vy", "vz", "wa", "wb", "wc", "wd", "we", "wf", "wg", "wh", "wi", "wj", "wk", "wl", "wm", "wn", "wo", "wp", "wq", "wr", "ws", "wt", "wu", "wv", "ww", "wx", "wy", "wz", "xa", "xb", "xc", "xd", "xe", "xf", "xg", "xh", "xi", "xj", "xk", "xl", "xm", "xn", "xo", "xp", "xq", "xr", "xs", "xt", "xu", "xv", "xw", "xx", "xy", "xz", "ya", "yb", "yc", "yd", "ye", "yf", "yg", "yh", "yi", "yj", "yk", "yl", "ym", "yn", "yo", "yp", "yq", "yr", "ys", "yt", "yu", "yv", "yw", "yx", "yy", "yz", "za", "zb", "zc", "zd", "ze", "zf", "zg", "zh", "zi", "zj", "zk", "zl", "zm", "zn", "zo", "zp", "zq", "zr", "zs", "zt", "zu", "zv", "zw", "zx", "zy", "zz"]
syllables = ["zup", "qom", "rig", "wuq", "sev", "col", "fos", "por", "liv", "rij", "ban", "zid", "qeb", "xow", "niw", "vut", "hif", "cop", "lop", "nam", "qud", "feg", "qum", "uv", "om", "was", "al", "ex", "zob", "fij", "fiq", "jem", "qoj", "ji", "weg", "nug", "coj", "xec", "ten", "guz", "woq", "naw", "xoq", "juh", "hiq", "pel", "bor", "quc", "xoh", "nus", "fes", "xac", "piv", "vam", "xav", "cuh", "pub", "dam", "wut", "zet", "vev", "nax", "jis", "hal", "bed", "roq", "tid", "iq", "nab", "hop", "daw", "tep", "bix", "jit", "jiw", "hab", "ub", "jab", "lux", "qap", "hor", "sos", "lep", "hih", "paw", "waq", "bab", "tuh", "sol", "jah", "wun", "reh", "seh", "qal", "fad", "biz", "net", "rej", "zon", "nag", "bag", "poc", "gun", "xos", "joc", "fot", "wod", "jaw", "vaz", "tut", "qog", "suq", "lo", "bas", "bog", "riw", "maf", "foj", "ig", "tup", "pac", "bug", "wix", "gut", "pex", "si", "hiz", "vox", "fut", "jot", "meg", "um", "feq", "vuh", "riz", "wev", "wuw", "guh", "xos", "hab", "cef", "gug", "bur", "pol", "zad", "ja", "fic", "deg", "cox", "ril", "nib", "laq", "os", "xe", "puj", "fix", "naz", "roc", "ne", "tip", "doq", "mus", "lac", "taz", "loq", "haj", "tif", "gij", "jed", "jog", "pot", "nif", "pag", "naq", "tih", "so", "piw", "jaw", "vit", "be", "zul", "fex", "paj", "taj", "lox", "teh", "hug", "zub", "riz", "lov", "qof", "hin", "tog", "tec", "cod", "xud", "ze", "hun", "lid", "jaj", "tol", "mof", "zeh", "sow", "bih", "puh", "fih", "vaq", "voq", "ah", "ser", "sib", "sab", "gaw", "rig", "fe", "zoc", "xud", "cuq", "nas", "fib", "tid", "fas", "tor"]

def __check_and_add_if_vowels__():
    syllable_buf = []
    syllable_index = random.randint(0, len(syllables) - 1)
    if syllables[syllable_index].find("a") or syllables[syllable_index].find("e") or syllables[syllable_index].find("i") or syllables[syllable_index].find("o") or syllables[syllable_index].find("u") or syllables[syllable_index].find("y"):
        return syllable_index
    else:
        __check_and_add_if_vowels__()

def generate_word_from_syllables(minlen:int, maxlen:int):
    ''' Create a new word from a list of syllables '''
    combined_name = ""
    for i in range(random.randint(minlen, maxlen)):
        combined_name += syllables[__check_and_add_if_vowels__()]
    return combined_name.capitalize()